//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "maven-publish"
	alias libs.plugins.loom
}

version = "$project.baseVersion+$project.branch"
archivesBaseName = project.archivesName

repositories {
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.enginehub.org/repo/" }
	mavenCentral()
}

configurations {
	shade
}

dependencies {
	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }
	modImplementation libs.fl
	modImplementation libs.fapi
	modImplementation libs.sodium

	modImplementation libs.nettyIoUringClasses
	modImplementation variantOf(libs.nettyIoUringNative) { classifier "linux-x86_64" }
	modImplementation libs.zstd

	modImplementation libs.worldeditCore
	modImplementation libs.worldeditFabric

	shade(libs.nettyIoUringClasses) { transitive = false }
	shade(variantOf(libs.nettyIoUringNative) { classifier "linux-x86_64" }) { transitive = false }
	shade(libs.zstd) { transitive = false }
}

processResources {
	final Map<String, String> meta = [
		version       : version,
		modId         : modId,
		modName       : modName,
		modDescription: modDescription,
		homepage      : homepage,
		issues        : issues,
		sources       : sources,
		license       : license,
		authors       : authors.split(", ").join("\",\n    \""),
		contributors  : contributors.split(", ").join("\",\n    \""),
		mc            : libs.versions.mc.get(),
		fl            : libs.versions.fl.get(),
		fapi          : libs.versions.fapi.get()
	]
	inputs.properties meta
	filesMatching("fabric.mod.json") { expand meta }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

loom {
	accessWidenerPath = file("src/main/resources/fireblanket.aw")
}

sourceSets {
	dummy {
		compileClasspath += sourceSets.main.compileClasspath
	}
	main {
		compileClasspath += sourceSets.dummy.output
	}
}

java {
	withSourcesJar()
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}

	configurations.shade.resolve().each {
		from(zipTree(it)) {
			exclude 'META-INF/MANIFEST.MF'
			exclude 'META-INF/INDEX.LIST'
			exclude 'META-INF/maven/**'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}
